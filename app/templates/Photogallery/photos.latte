
{block head}
{include parent}
<link rel="stylesheet" href="{$basePath}/css/justifiedGallery.min.css" type="text/css" />
<link rel="stylesheet" href="{$basePath}/css/photoswipe.min.css" type="text/css" />
<link rel="stylesheet" href="{$basePath}/css/default-skin/default-skin.min.css" type="text/css" />{/block}
{block content}
<h1 class="main-title">{$galery->title}</h1>
<article>
<p class="description">{$galery->description}</p>
<div id="gallery" n:inner-foreach="$photos as $photo">
	<a href="{$basePath}/images/galery/{$galery->photos_folder}/photos/{$photo->file}">
		<img src="{$basePath}/images/galery/{$galery->photos_folder}/previews/{$photo->file}" data-size="{$photo->width}x{$photo->height}" alt="{$photo->description}" />
	</a>
</div>
</article>
{include photoswipe.latte}
{/block}
{block scripts}
{include parent}
<script src="{$basePath}/js/jquery.justifiedGallery.min.js"></script>
<script src="{$basePath}/js/photoswipe.min.js"></script> 
<script src="{$basePath}/js/photoswipe-ui-default.min.js"></script>
<script>      
    $("#gallery").justifiedGallery({
        rowHeight: 120,
        lastRow: 'nojustify',
        captions: false,
        margins: 2
    });
  
    var initPhotoSwipeFromDOM = function(gallerySelector) {

        // parse slide data (url, title, size ...) from DOM elements 
        // (children of gallerySelector)
        var parseThumbnailElements = function(el) {
            var thumbElements = el.childNodes,
                numNodes = thumbElements.length,
                items = [],
                figureEl,
                linkEl,
                size,
                item;

            for(var i = 0; i < numNodes; i++) {

                aEl = thumbElements[i]; // <a> element

                // include only element nodes 
                if(aEl.nodeType !== 1) {
                    continue;
                }

                imgEl = aEl.children[0]; // <img> element

                size = imgEl.getAttribute('data-size').split('x');

                // create slide object
                item = {
                    src: aEl.getAttribute('href'),
                    w: parseInt(size[0], 10),
                    h: parseInt(size[1], 10)
                };

                if($(imgEl).attr("alt") !== undefined) {
                    // caption content
                    item.title = $(imgEl).attr("alt"); 
                }

                if(aEl.children.length > 0) {
                    // <img> thumbnail element, retrieving thumbnail url
                    item.msrc = aEl.children[0].getAttribute('src');
                } 

                item.el = aEl; // save link to element for getThumbBoundsFn
                items.push(item);
            }

            return items;
        };

        // find nearest parent element
        var closest = function closest(el, fn) {
            return el && ( fn(el) ? el : closest(el.parentNode, fn) );
        };

        // triggers when user clicks on thumbnail
        var onThumbnailsClick = function(e) {
          console.log(1);
            e = e || window.event;
            e.preventDefault ? e.preventDefault() : e.returnValue = false;

            var eTarget = e.target || e.srcElement;

            // find root element of slide
            var clickedListItem = closest(eTarget, function(el) {
                return (el.tagName && el.tagName.toUpperCase() === 'A');
            });

            if(!clickedListItem) {
                return;
            }

            // find index of clicked item by looping through all child nodes
            // alternatively, you may define index via data- attribute
            var clickedGallery = clickedListItem.parentNode,
                childNodes = clickedListItem.parentNode.childNodes,
                numChildNodes = childNodes.length,
                nodeIndex = 0,
                index;

            for (var i = 0; i < numChildNodes; i++) {
                if(childNodes[i].nodeType !== 1) { 
                    continue; 
                }

                if(childNodes[i] === clickedListItem) {
                    index = nodeIndex;
                    break;
                }
                nodeIndex++;
            }

            if(index >= 0) {
                // open PhotoSwipe if valid index found
                openPhotoSwipe( index, clickedGallery );
            }
            return false;
        };

        var openPhotoSwipe = function(index, galleryElement, disableAnimation) {
            var pswpElement = document.querySelectorAll('.pswp')[0],
                gallery,
                options,
                items;

            items = parseThumbnailElements(galleryElement);

            // define options (if needed)
            options = {
                index: index,

                // define gallery index (for URL)
                galleryUID: galleryElement.getAttribute('data-pswp-uid'),

                getThumbBoundsFn: function(index) {
                    // See Options -> getThumbBoundsFn section of documentation for more info
                    var thumbnail = items[index].el.getElementsByTagName('img')[0], // find thumbnail
                        pageYScroll = window.pageYOffset || document.documentElement.scrollTop,
                        rect = thumbnail.getBoundingClientRect(); 

                    return { x:rect.left, y:rect.top + pageYScroll, w:rect.width};
                }

            };

            if(disableAnimation) {
                options.showAnimationDuration = 0;
            }

            // Pass data to PhotoSwipe and initialize it
            gallery = new PhotoSwipe( pswpElement, PhotoSwipeUI_Default, items, options);
            gallery.init();
        };

        // loop through all gallery elements and bind events
        var galleryElements = document.querySelectorAll( gallerySelector );

        for(var i = 0, l = galleryElements.length; i < l; i++) {
            galleryElements[i].setAttribute('data-pswp-uid', i+1);
            galleryElements[i].onclick = onThumbnailsClick;
        }
    };

    initPhotoSwipeFromDOM('#gallery');
</script>
{/block}